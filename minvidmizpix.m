function [MinT, MinP] = minvidmizpix(Kx, Ky, CWx, CWy, Nx, Ny, proc)
% Функція розрахунку мінімальної відстані між сусідніми пікселями

% Kx, Ky - масив значень нумерацій точок з врахуванням сусідів
% CWx, CWy - центра мас для "сусідів" пікселів та межі
% Nx, Ny - які можливо відобразити

% Процент вільного місця між пікселями
% proc = 10;

% Задаємо початкові значення лічильника
% По вертикалі
kx = 1;
ky = 1;
% По горизонталі
tx = 1;
ty = 1;

Lx(1, 1) = NaN;
Ly(1, 1) = NaN;
MinT(1, 1) = NaN;
MinP(1, 1) = NaN;

% Визначаємо відстані між пікселями
for i = 1:Nx
    for j = 1:Ny
        % Перевіряємо чи піксель без сусідів умовно по вертикалі
        % ((Kx(3, i) - Kx(3, i + 1)) ~= 1) - обов'язково необхідно стаивити
        % в кінці, щоб провірка до нього не доходила коли потірбно
        if (i < Nx) && (abs(Kx(3, i) - Kx(3, i + 1)) ~= 1)
            % Визначаємо відстань між центрами сусідніх пікселів
            MinT(kx, tx) = vipstanmizpix(CWx{1}(i, j), CWx{1}(i + 1, j),...
                CWy{1}(i, j), CWy{1}(i + 1, j));
            
            % Визначаємо перетин бокової сторони проекції першого пікселя
            % із прямою яка з'єднує центри пікселів
            [x, y] = peretintoch(CWx{2}(i, j), CWy{2}(i, j),...
                CWx{3}(i, j), CWy{3}(i, j), CWx{1}(i, j), CWy{1}(i, j),...
                CWx{1}(i + 1, j), CWy{1}(i + 1, j));
            
            % Знаходимо відстань від найденої точки до центра пікселя
            Lx(kx, tx) = vipstanmizpix(CWx{1}(i, j), x, CWy{1}(i, j), y);
            
            % Визначаэмо перетин бокової сторони проекції другого пікселя
            % із прямою яка з'єднує центри пікселів
            [x, y] = peretintoch(CWx{4}(i + 1, j), CWy{4}(i + 1, j),...
                CWx{5}(i + 1, j), CWy{5}(i + 1, j), CWx{1}(i, j),...
                CWy{1}(i, j), CWx{1}(i + 1, j), CWy{1}(i + 1, j));
            
            % Знаходимо відстань від найденої точки до центра пікселя
           Lx(kx, tx) = Lx(kx, tx) + vipstanmizpix(CWx{1}(i + 1, j),...
               x, CWy{1}(i + 1, j), y);
           
        end
        
        % Перевіряємо чи піксель без сусідів умовно по горизонталі
        % ((Ky(3, j) - Ky(3, j + 1)) ~= 1) - обов'язково необхідно стаивити
        % в кінці, щоб провірка до нього не доходила коли потірбно
        if (j < Ny) && (abs(Ky(3, j) - Ky(3, j + 1)) ~= 1)
            % Визначаємо відстань між сусідніми пікселями
            MinP(ky, ty) = vipstanmizpix(CWx{1}(i, j), CWx{1}(i, j + 1),...
                CWy{1}(i, j), CWy{1}(i, j + 1));
            
            % Визначаэмо перетин бокової сторони проекції першого пікселя
            % із прямою яка з'єднує центри пікселів
            [x, y] = peretintoch(CWx{3}(i, j), CWy{3}(i, j),...
                CWx{4}(i, j), CWy{4}(i, j), CWx{1}(i, j), CWy{1}(i, j),...
                CWx{1}(i , j + 1), CWy{1}(i, j + 1));
            
            % Знаходимо відстань від найденої точки до центра пікселя
            Ly(ky, ty) = vipstanmizpix(CWx{1}(i, j), x, CWy{1}(i, j), y);
            
            % Визначаэмо перетин бокової сторони проекції другого пікселя
            % із прямою яка з'єднує центри пікселів
            [x, y] = peretintoch(CWx{2}(i, j + 1), CWy{2}(i, j + 1),...
                CWx{5}(i, j + 1), CWy{5}(i, j + 1), CWx{1}(i, j),...
                CWy{1}(i, j), CWx{1}(i, j + 1), CWy{1}(i, j + 1));
            
            % Знаходимо відстань від найденої точки до центра пікселя
            Ly(ky, ty) = Ly(ky, ty) + vipstanmizpix(CWx{1}(i, j + 1),...
                x, CWy{1}(i, j + 1), y);
        end
        
        % Оновлюємо нумерацію по горизонталі
        if (j < Ny) && (abs((Ky(3, j) - Ky(3, j + 1))) ~= 1)
            tx = tx + 1;
            ty = ty + 1;
        else
            tx = tx + 1;
        end
    end
    
    % Оновлюємо нумерацію по вертикалі
    if (i < Nx) && (abs((Kx(3, i) - Kx(3, i + 1))) ~= 1)
        kx = kx + 1;
        ky = ky + 1;
    else
        ky = ky + 1;
    end
    
    % Скидаємо лічильник
    tx = 1;
    ty = 1;
end

% Знаходимо відстань проміжка який необхідний між пікселями
dLx = min(Lx(:)) * (proc / 100);
dLy = min(Ly(:)) * (proc / 100);
% dLx = Lx .* (proc / 100);
% dLy = Ly .* (proc / 100);

% Додамо проміжок до відстані яку займають піеселі між їх центрами
Lx = Lx + dLx;
Ly = Ly + dLy;

% Знайдемо коефіцієнти та врахуэмо випадок невизначеності
MinT = MinT ./ Lx;
MinP = MinP ./ Ly;
% if isnan(Lx)
%     MinT = NaN;
% else
%     MinT = MinT ./ Lx;
% end
% if isnan(Ly)
%     MinP = NaN;
% else
%     MinP = MinP ./ Ly;
% end

% Знаходимо найменший коефіцієнт
MinT = min(MinT(:));
MinP = min(MinP(:));

end
